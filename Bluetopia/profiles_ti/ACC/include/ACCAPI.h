/*****< accapi.h >*************************************************************/
/*      Copyright 2011 - 2012 Stonestreet One.                                */
/*      All Rights Reserved.                                                  */
/*                                                                            */
/*  ACCAPI - Stonestreet One Bluetooth Accelerometer Service (GATT based - TI */
/*           Proprietary) API Type Definitions, Constants, and Prototypes.    */
/*                                                                            */
/*  Author:  Tim Cook                                                         */
/*                                                                            */
/*** MODIFICATION HISTORY *****************************************************/
/*                                                                            */
/*   mm/dd/yy  F. Lastname    Description of Modification                     */
/*   --------  -----------    ------------------------------------------------*/
/*   08/27/12  T. Cook        Initial creation.                               */
/******************************************************************************/
#ifndef __ACCAPIH__
#define __ACCAPIH__

#include "SS1BTPS.h"        /* Bluetooth Stack API Prototypes/Constants.      */
#include "SS1BTGAT.h"       /* Bluetooth Stack GATT API Prototypes/Constants. */
#include "ACCTypes.h"       /* Accelerometer Service Types/Constants.         */

   /* Error Return Codes.                                               */

   /* Error Codes that are smaller than these (less than -1000) are     */
   /* related to the Bluetooth Protocol Stack itself (see BTERRORS.H).  */
#define ACC_ERROR_INVALID_PARAMETER                      (-1000)
#define ACC_ERROR_INSUFFICIENT_RESOURCES                 (-1001)
#define ACC_ERROR_SERVICE_ALREADY_REGISTERED             (-1003)
#define ACC_ERROR_INVALID_INSTANCE_ID                    (-1004)
#define ACC_ERROR_MALFORMATTED_DATA                      (-1005)
#define ACC_ERROR_UNKNOWN_ERROR                          (-1006)

   /* The following structure contains the Handles that will need to be */
   /* cached by a ACC client in order to only do service discovery once.*/
typedef struct _tagACC_Client_Information_t
{
   Word_t Enable_Characteristic;
   Word_t XAxis_Characteristic;
   Word_t XAxis_Characteristic_CCCD;
   Word_t YAxis_Characteristic;
   Word_t YAxis_Characteristic_CCCD;
   Word_t ZAxis_Characteristic;
   Word_t ZAxis_Characteristic_CCCD;
} ACC_Client_Information_t;

#define ACC_CLIENT_INFORMATION_DATA_SIZE                (sizeof(ACC_Client_Information_t))

   /* The following structure contains all of the per Client data that  */
   /* will need to be stored by a ACC Server.                           */
typedef struct _tagACC_Server_Information_t
{
   Boolean_t XAxis_Client_Configuration;
   Boolean_t YAxis_Client_Configuration;
   Boolean_t ZAxis_Client_Configuration;
   Boolean_t AccelerometerEnabled;
} ACC_Server_Information_t;

   /* The following enumerated type defines the valid Read Request types*/
   /* that a server may receive in a                                    */
   /* etACC_Server_Read_Client_Configuration_Request or                 */
   /* etACC_Server_Client_Configuration_Update event.                   */
   /* * NOTE * For each event it is up to the application to return (or */
   /*          write) the correct Client Configuration descriptor based */
   /*          on this value.                                           */
typedef enum
{
   ctXAxis,
   ctYAxis,
   ctZAxis
} ACC_Characteristic_Type_t;

   /* The following enumeration covers all the events generated by the  */
   /* ACC Profile.  These are used to determine the type of each event  */
   /* generated, and to ensure the proper union element is accessed for */
   /* the ACC_Event_Data_t structure.                                   */
typedef enum
{
   etACC_Server_Read_Client_Configuration_Request,
   etACC_Server_Client_Configuration_Update,
   etACC_Server_Accelerometer_Enable_Read_Request,
   etACC_Server_Accelerometer_Enable_Update_Request
} ACC_Event_Type_t;

   /* The following ACC Profile Event is dispatched to a ACC Server when*/
   /* a ACC Client is attempting to read a Client Configuration         */
   /* Descriptor.  The ConnectionID, ConnectionType, and RemoteDevice   */
   /* specifiy the Client that is making the request.  The TransactionID*/
   /* specifies the TransactionID of the request, this can be used when */
   /* responding to the request using the                               */
   /* ACC_Client_Configuration_Read_Response() API function.  The       */
   /* Characteristic Type specifies the Client Characteristic           */
   /* Configuration Descriptor that the Server is attempting to read.   */
typedef struct _tagACC_Read_Client_Configuration_Data_t
{
   unsigned int              InstanceID;
   unsigned int              ConnectionID;
   unsigned int              TransactionID;
   GATT_Connection_Type_t    ConnectionType;
   BD_ADDR_t                 RemoteDevice;
   ACC_Characteristic_Type_t CharacteristicType;
} ACC_Read_Client_Configuration_Data_t;

#define ACC_READ_CLIENT_CONFIGURATION_DATA_SIZE          (sizeof(ACC_Read_Client_Configuration_Data_t))

   /* The following ACC Profile Event is dispatched to a ACC Server when*/
   /* a ACC Client has written a Client Configuration descriptor.  The  */
   /* ConnectionID, ConnectionType, and RemoteDevice specifiy the Client*/
   /* that is making the update.  The Characteristic Type specifies the */
   /* Client Configuration Descriptor that has been updated for the     */
   /* specified client.                                                 */
typedef struct _tagACC_Client_Configuration_Update_Data_t
{
   unsigned int              InstanceID;
   unsigned int              ConnectionID;
   GATT_Connection_Type_t    ConnectionType;
   BD_ADDR_t                 RemoteDevice;
   ACC_Characteristic_Type_t CharacteristicType;
   Boolean_t                 NotificationsEnabled;
} ACC_Client_Configuration_Update_Data_t;

#define ACC_CLIENT_CONFIGURATION_UPDATE_DATA_SIZE        (sizeof(ACC_Client_Configuration_Update_Data_t))

   /* The following ACC Profile Event is dispatched to a ACC Server when*/
   /* a ACC Client is requesting to read the Enable Characteristic.  The*/
   /* ConnectionID, ConnectionType, and RemoteDevice specifiy the Client*/
   /* that is making the request.                                       */
   /* * NOTE * The ACCEL_Enable_Read_Request_Response() API should be   */
   /*          used to either accept or reject the Write Request.       */
typedef struct _tagACC_Accelerometer_Enable_Read_Request_Data_t
{
   unsigned int           InstanceID;
   unsigned int           ConnectionID;
   unsigned int           TransactionID;
   GATT_Connection_Type_t ConnectionType;
   BD_ADDR_t              RemoteDevice;
} ACC_Accelerometer_Enable_Read_Request_Data_t;

#define ACC_ACCELEROMETER_ENABLE_READ_REQUEST_DATA_SIZE       (sizeof(ACC_Accelerometer_Enable_Read_Request_Data_t))

   /* The following ACC Profile Event is dispatched to a ACC Server when*/
   /* a ACC Client is requesting that the accelerometer be enabled or   */
   /* disabled.  The ConnectionID, ConnectionType, and RemoteDevice     */
   /* specifiy the Client that is making the request.  The              */
   /* EnableAccelerometer member specifies if the Client request that   */
   /* the accelerometer be enabled (TRUE) or disabled (FALSE).          */
   /* * NOTE * The ACCEL_Enable_Update_Request_Response() API should be */
   /*          used to either accept or reject the Write Request.       */
typedef struct _tagACC_Accelerometer_Enable_Update_Request_Data_t
{
   unsigned int              InstanceID;
   unsigned int              ConnectionID;
   unsigned int              TransactionID;
   GATT_Connection_Type_t    ConnectionType;
   BD_ADDR_t                 RemoteDevice;
   Boolean_t                 EnableAccelerometer;
} ACC_Accelerometer_Enable_Update_Request_Data_t;

#define ACC_ACCELEROMETER_ENABLE_UPDATE_REQUEST_DATA_SIZE     (sizeof(ACC_Accelerometer_Enable_Update_Request_Data_t))

   /* The following structure represents the container structure for    */
   /* holding all ACC Profile Event Data.  This structure is received   */
   /* for each event generated.  The Event_Data_Type member is used to  */
   /* determine the appropriate union member element to access the      */
   /* contained data.  The Event_Data_Size member contains the total    */
   /* size of the data contained in this event.                         */
typedef struct _tagACC_Event_Data_t
{
   ACC_Event_Type_t Event_Data_Type;
   Word_t           Event_Data_Size;
   union
   {
      ACC_Read_Client_Configuration_Data_t           *ACC_Read_Client_Configuration_Data;
      ACC_Client_Configuration_Update_Data_t         *ACC_Client_Configuration_Update_Data;
      ACC_Accelerometer_Enable_Read_Request_Data_t   *ACC_Accelerometer_Enable_Read_Request_Data;
      ACC_Accelerometer_Enable_Update_Request_Data_t *ACC_Accelerometer_Enable_Update_Request_Data;
   } Event_Data;
} ACC_Event_Data_t;

#define ACC_EVENT_DATA_SIZE                             (sizeof(ACC_Event_Data_t))

   /* The following declared type represents the Prototype Function for */
   /* a ACC Profile Event Receive Data Callback.  This function will be */
   /* called whenever an ACC Profile Event occurs that is associated    */
   /* with the specified Bluetooth Stack ID.  This function passes to   */
   /* the caller the Bluetooth Stack ID, the ACC Event Data that        */
   /* occurred and the ACC Profile Event Callback Parameter that was    */
   /* specified when this Callback was installed.  The caller is free to*/
   /* use the contents of the ACC Profile Event Data ONLY in the context*/
   /* of this callback.  If the caller requires the Data for a longer   */
   /* period of time, then the callback function MUST copy the data into*/
   /* another Data Buffer This function is guaranteed NOT to be invoked */
   /* more than once simultaneously for the specified installed callback*/
   /* (i.e.  this function DOES NOT have be re-entrant).  It needs to be*/
   /* noted however, that if the same Callback is installed more than   */
   /* once, then the callbacks will be called serially.  Because of     */
   /* this, the processing in this function should be as efficient as   */
   /* possible.  It should also be noted that this function is called in*/
   /* the Thread Context of a Thread that the User does NOT own.        */
   /* Therefore, processing in this function should be as efficient as  */
   /* possible (this argument holds anyway because another ACC Profile  */
   /* Event will not be processed while this function call is           */
   /* outstanding).                                                     */
   /* ** NOTE ** This function MUST NOT Block and wait for events that  */
   /*            can only be satisfied by Receiving ACC Profile Event   */
   /*            Packets.  A Deadlock WILL occur because NO ACC Event   */
   /*            Callbacks will be issued while this function is        */
   /*            currently outstanding.                                 */
typedef void (BTPSAPI *ACC_Event_Callback_t)(unsigned int BluetoothStackID, ACC_Event_Data_t *ACC_Event_Data, unsigned long CallbackParameter);

   /* The following function is responsible for opening a ACC Server.   */
   /* The first parameter is the Bluetooth Stack ID on which to open the*/
   /* server.  The final parameter is a pointer to store the GATT       */
   /* Service ID of the registered ACC service.  This can be used to    */
   /* include the service registered by this call.  This function       */
   /* returns the positive, non-zero, Instance ID or a negative error   */
   /* code.                                                             */
BTPSAPI_DECLARATION int BTPSAPI ACC_Initialize_Service(unsigned int BluetoothStackID, ACC_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACC_Initialize_Service_t)(unsigned int BluetoothStackID, ACC_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID);
#endif

   /* The following function is responsible for closing a previously ACC*/
   /* Server.  The first parameter is the Bluetooth Stack ID on which to*/
   /* close the server.  The second parameter is the InstanceID that was*/
   /* returned from a successfull call to ACC_Initialize_Service().     */
   /* This function returns a zero if successful or a negative return   */
   /* error code if an error occurs.                                    */
BTPSAPI_DECLARATION int BTPSAPI ACC_Cleanup_Service(unsigned int BluetoothStackID, unsigned int InstanceID);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACC_Cleanup_Service_t)(unsigned int BluetoothStackID, unsigned int InstanceID);
#endif

   /* The following function is responsible for setting the             */
   /* Accelerometer Range Characteristic on the specified Accelerometer */
   /* Service instance.  The first parameter is the Bluetooth Stack ID  */
   /* of the Bluetooth Device.  The second parameter is the InstanceID  */
   /* returned from a successful call to ACC_Initialize_Server().  The  */
   /* final parameter is the Range value to set as the current          */
   /* Accelerometer Range for the specified Accelerometer Service       */
   /* Instance.  This function returns a zero if successful or a        */
   /* negative return error code if an error occurs.                    */
BTPSAPI_DECLARATION int BTPSAPI ACC_Set_Accelerometer_Range(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t AccelerometerRange);
                                                                                                
#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES                                                         
   typedef int (BTPSAPI *PFN_ACC_Set_Accelerometer_Range_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t AccelerometerRange);
#endif
   
   /* The following function is responsible for querying the current    */
   /* Accelerometer Range Characteristic on the specified Accelerometer */
   /* Service instance.  The first parameter is the Bluetooth Stack ID  */
   /* of the Bluetooth Device.  The second parameter is the InstanceID  */
   /* returned from a successful call to ACC_Initialize_Server().  The  */
   /* final parameter is a pointer to return the current Accelerometer  */
   /* Range for the specified ACC Service Instance.  This function      */
   /* returns a zero if successful or a negative return error code if an*/
   /* error occurs.                                                     */
BTPSAPI_DECLARATION int BTPSAPI ACC_Query_Accelerometer_Range(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t *AccelerometerRange);
                                                                                                
#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES                                                         
   typedef int (BTPSAPI *PFN_ACC_Query_Accelerometer_Range_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t *AccelerometerRange);
#endif

   /* The following function is responsible for responding to a ACC Read*/
   /* Client Configuration Request.  The first parameter is the         */
   /* Bluetooth Stack ID of the Bluetooth Device.  The second parameter */
   /* is the InstanceID returned from a successful call to              */
   /* ACC_Initialize_Server().  The third is the Transaction ID of the  */
   /* request.  The fourth and the final parameter contains the value to*/
   /* send to the remote device.  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
BTPSAPI_DECLARATION int BTPSAPI ACC_Read_Client_Configuration_Response(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Boolean_t NotificationsEnabled);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACC_Read_Client_Configuration_Response_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Boolean_t NotificationsEnabled);
#endif

   /* The following function is responsible for responding to a ACC     */
   /* Enable Read Request.  The first parameter is the Bluetooth Stack  */
   /* ID of the Bluetooth Device.  The second parameter is the          */
   /* InstanceID returned from a successful call to                     */
   /* ACC_Initialize_Server().  The third is the Transaction ID of the  */
   /* request.  The fourth and the final parameter contains the         */
   /* Accelerometer Enable Value.  This function returns a zero if      */
   /* successful or a negative return error code if an error occurs.    */
BTPSAPI_DECLARATION int BTPSAPI ACCEL_Enable_Read_Request_Response(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Boolean_t AccelerometerEnabled);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACCEL_Enable_Read_Request_Response_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Boolean_t AccelerometerEnabled);
#endif

   /* The following function is responsible for responding to a ACC     */
   /* Enable Update Request.  The first parameter is the Bluetooth Stack*/
   /* ID of the Bluetooth Device.  The second parameter is the          */
   /* InstanceID returned from a successful call to                     */
   /* ACC_Initialize_Server().  The third is the Transaction ID of the  */
   /* request.  The final parameter is used to either accept or reject  */
   /* the update request.  This function returns a zero if successful or*/
   /* a negative return error code if an error occurs.                  */
   /* * NOTE * To accept the update request the ErrorCode parameter     */
   /*          should be set to 0.                                      */
   /* * NOTE * To reject the update request set ErrorCode to a non-zero */
   /*          error code that is to be returned in the error response. */
BTPSAPI_DECLARATION int BTPSAPI ACCEL_Enable_Update_Request_Response(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Byte_t ErrorCode);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACCEL_Enable_Update_Request_Response_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Byte_t ErrorCode);
#endif

   /* The following function is responsible for sending a Key Press     */
   /* notification to a specified remote device.  The first parameter is*/
   /* the Bluetooth Stack ID of the Bluetooth Device.  The second       */
   /* parameter is the InstanceID returned from a successful call to    */
   /* KFS_Initialize_Server().  The third parameter is the ConnectionID */
   /* of the remote device to send the notification to.  The fourth and */
   /* final parameters specify the axis that is to be notified and the  */
   /* axis value.  This function returns a zero if successful or a      */
   /* negative return error code if an error occurs.                    */
BTPSAPI_DECLARATION int BTPSAPI ACC_Notify_Axis(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, ACC_Characteristic_Type_t CharacteristicType, Byte_t Value);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_ACC_Notify_Axis_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, ACC_Characteristic_Type_t CharacteristicType, Byte_t Value);
#endif

#endif
